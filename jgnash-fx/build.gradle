plugins {
    id "org.openjfx.javafxplugin" version "0.0.7"
}

apply plugin: "distribution"
apply plugin: "application" // creates a task to run the full application

description = "jGnash JavaFx"
mainClassName = "jGnashFx"

dependencies {
    //compile project(":jgnash-manual")
    compile project(":jgnash-core")
    compile project(":jgnash-convert")
    compile project(":jgnash-report-core")
    compile project(":jgnash-plugin")

    compile group: "info.picocli", name: "picocli", version: picocliVersion

    // Hack to include all javafx platforms in the classpath
    // The platform specific libraries are excluded when distributions is assembled
    compile "org.openjfx:javafx-base:" + javaFXVersion
    compile "org.openjfx:javafx-controls:" + javaFXVersion
    compile "org.openjfx:javafx-fxml:" + javaFXVersion
    compile "org.openjfx:javafx-graphics:" + javaFXVersion
    compile "org.openjfx:javafx-media:" + javaFXVersion
    compile "org.openjfx:javafx-swing:" + javaFXVersion
    compile "org.openjfx:javafx-web:" + javaFXVersion

    compile "org.openjfx:javafx-base:" + javaFXVersion + ":linux"
    compile "org.openjfx:javafx-controls:" + javaFXVersion + ":linux"
    compile "org.openjfx:javafx-fxml:" + javaFXVersion + ":linux"
    compile "org.openjfx:javafx-graphics:" + javaFXVersion + ":linux"
    compile "org.openjfx:javafx-media:" + javaFXVersion + ":linux"
    compile "org.openjfx:javafx-swing:" + javaFXVersion + ":linux"
    compile "org.openjfx:javafx-web:" + javaFXVersion + ":linux"

    compile "org.openjfx:javafx-base:" + javaFXVersion + ":win"
    compile "org.openjfx:javafx-controls:" + javaFXVersion + ":win"
    compile "org.openjfx:javafx-fxml:" + javaFXVersion + ":win"
    compile "org.openjfx:javafx-graphics:" + javaFXVersion + ":win"
    compile "org.openjfx:javafx-media:" + javaFXVersion + ":win"
    compile "org.openjfx:javafx-swing:" + javaFXVersion + ":win"
    compile "org.openjfx:javafx-web:" + javaFXVersion + ":win"

    compile "org.openjfx:javafx-base:" + javaFXVersion + ":mac"
    compile "org.openjfx:javafx-controls:" + javaFXVersion + ":mac"
    compile "org.openjfx:javafx-fxml:" + javaFXVersion + ":mac"
    compile "org.openjfx:javafx-graphics:" + javaFXVersion + ":mac"
    compile "org.openjfx:javafx-media:" + javaFXVersion + ":mac"
    compile "org.openjfx:javafx-swing:" + javaFXVersion + ":mac"
    compile "org.openjfx:javafx-web:" + javaFXVersion + ":mac"
    // end hack

    // required of Unit testing JavaFX
    testCompile group: 'org.testfx', name: 'testfx-junit5', version: '4.0.15-alpha'
    testCompile group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-11+26'
}

javafx {
    version = javaFXVersion
    modules = ["javafx.base", "javafx.controls", "javafx.fxml", "javafx.web", "javafx.swing", "javafx.graphics", "javafx.media"]
}

startScripts.enabled = false

// build the mt940 plugin prior to creating the zip file without creating a circular loop
distZip.dependsOn(":mt940:build")

distZip {
    into("jGnash-$version") {
        from "."
        include "scripts/*"
    }

    into("jGnash-$version") {
        from "../mt940/build/libs"
        include "*"
        into "jGnash-$version/plugins"
    }

    doLast {
        file("$destinationDir/$archiveName").renameTo("$destinationDir/"+"jGnashFx-"+version+".zip")
    }
}

distributions {
    main {
        baseName = "jGnash"
        contents {
            exclude("**/*-linux*")  // excludes linux specific JavaFx modules from cross platform zip
            exclude("**/*-win*")    // excludes windows specific JavaFx modules from cross platform zip
            exclude("**/*-mac*")    // excludes mac specific JavaFx modules from cross platform zip
        }
    }
}

jar {
    // Keep jar clean:
    exclude "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA", "META-INF/*.MF"

    manifest {
        attributes "Main-Class": "jGnashFx",
                "Class-Path": configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(" ")
    }
}
